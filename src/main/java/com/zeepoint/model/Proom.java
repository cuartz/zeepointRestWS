package com.zeepoint.model;
// Generated Jun 29, 2015 2:10:42 AM by Hibernate Tools 4.3.1


import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

/**
 * Proom generated by hbm2java
 */
@Entity
@Table(name="proom"
    ,catalog="zipoints"
)
public class Proom  implements java.io.Serializable {


     private long id;
     private Zipuser zipuserByUserId;
     private Zipuser zipuserByUser2id;
     private String status;

    public Proom() {
    }

	
    public Proom(long id, Zipuser zipuserByUserId, Zipuser zipuserByUser2id) {
        this.id = id;
        this.zipuserByUserId = zipuserByUserId;
        this.zipuserByUser2id = zipuserByUser2id;
    }
    public Proom(long id, Zipuser zipuserByUserId, Zipuser zipuserByUser2id, String status) {
       this.id = id;
       this.zipuserByUserId = zipuserByUserId;
       this.zipuserByUser2id = zipuserByUser2id;
       this.status = status;
    }
   
     @Id 

    
    @Column(name="id", unique=true, nullable=false)
    public long getId() {
        return this.id;
    }
    
    public void setId(long id) {
        this.id = id;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="userId", nullable=false)
    public Zipuser getZipuserByUserId() {
        return this.zipuserByUserId;
    }
    
    public void setZipuserByUserId(Zipuser zipuserByUserId) {
        this.zipuserByUserId = zipuserByUserId;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="user2Id", nullable=false)
    public Zipuser getZipuserByUser2id() {
        return this.zipuserByUser2id;
    }
    
    public void setZipuserByUser2id(Zipuser zipuserByUser2id) {
        this.zipuserByUser2id = zipuserByUser2id;
    }

    
    @Column(name="status", length=45)
    public String getStatus() {
        return this.status;
    }
    
    public void setStatus(String status) {
        this.status = status;
    }




}


